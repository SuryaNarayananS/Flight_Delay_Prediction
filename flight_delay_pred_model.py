# -*- coding: utf-8 -*-
"""Flight_Delay_Pred_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DLpMz-5Wq7iuSFNNltbJ6pfV94mzrQ1R

**Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# from pandas_profiling import ProfileReport
import datetime
# import statsmodels.formula.api as smf
# import statsmodels.api as sm
# import seaborn as sns
# from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split
# from keras.models import Sequential
# from keras.layers import Dense, Activation,Layer,Lambda
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
# from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
from datetime import date
import pickle

"""**Reading CSV File**"""

df=pd.read_csv("../Data/flights.csv")
print (df.head())
print(df.shape)
df.info()

"""**Data Cleaning**"""

df1 = df.drop(['YEAR','AIR_SYSTEM_DELAY', 'SECURITY_DELAY', 'AIRLINE_DELAY', 'LATE_AIRCRAFT_DELAY',
                       'WEATHER_DELAY', 'DIVERTED', 'CANCELLED', 'CANCELLATION_REASON',
                       'FLIGHT_NUMBER', 'TAIL_NUMBER','ELAPSED_TIME','AIR_TIME'], axis=1)

# # converting day, month, and year to datetime format
# df1['DATE'] = pd.to_datetime(df1[['YEAR','MONTH', 'DAY']])

def format_time(time):
            time = float(time / 100)

            return time
df1['WHEELS_ON_HOUR']=df1['WHEELS_ON'].apply(format_time)
df1['WHEELS_OFF_HOUR']=df1['WHEELS_OFF'].apply(format_time)
df1['DEPARTURE_TIME_HOUR']=df1['DEPARTURE_TIME'].apply(format_time)
df1['SCHEDULED_DEPARTURE_HOUR']=df1['SCHEDULED_DEPARTURE'].apply(format_time)
df1['SCHEDULED_ARRIVAL_HOUR']=df1['SCHEDULED_ARRIVAL'].apply(format_time)
df1['ARRIVAL_TIME_HOUR']=df1['ARRIVAL_TIME'].apply(format_time)
df2 = df1.drop(['WHEELS_ON', 'WHEELS_OFF','SCHEDULED_DEPARTURE', 'DEPARTURE_TIME', 'SCHEDULED_ARRIVAL', 'ARRIVAL_TIME', 'WHEELS_ON_HOUR', 'WHEELS_OFF_HOUR'], axis=1)
print (df2)


df3 = df2[['MONTH', 'DAY', 'DAY_OF_WEEK', 'TAXI_OUT', 'TAXI_IN', 'AIRLINE', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT',
        'SCHEDULED_DEPARTURE_HOUR', 'DEPARTURE_TIME_HOUR', 'SCHEDULED_ARRIVAL_HOUR', 'ARRIVAL_TIME_HOUR', 'ARRIVAL_DELAY',
        'SCHEDULED_TIME', 'DEPARTURE_DELAY']]
df3.isnull().sum()
cleaned_df=df3.dropna()
print (cleaned_df)

"""**Sample Data**"""

sample_df = cleaned_df.sample(n=100000,replace="true")
print (sample_df.head())

"""**Preprocessing**"""

sample_df['ORIGIN_AIRPORT']=sample_df['ORIGIN_AIRPORT'].astype('str')
sample_df['DESTINATION_AIRPORT']=sample_df['DESTINATION_AIRPORT'].astype('str')
sample_df['AIRLINE']=sample_df['AIRLINE'].astype('str')
sample_df['SCHEDULED_DEPARTURE_HOUR']=sample_df['SCHEDULED_DEPARTURE_HOUR'].astype('float64')
sample_df['DEPARTURE_TIME_HOUR']=sample_df['DEPARTURE_TIME_HOUR'].astype('float64')
sample_df['SCHEDULED_ARRIVAL_HOUR']=sample_df['SCHEDULED_ARRIVAL_HOUR'].astype('float64')
sample_df['ARRIVAL_TIME_HOUR']=sample_df['ARRIVAL_TIME_HOUR'].astype('float64')
sample_df.head()

cat_column=sample_df[['ORIGIN_AIRPORT','DESTINATION_AIRPORT', 'AIRLINE']]
lab_enc = cat_column.apply(LabelEncoder().fit_transform)
flights_df = sample_df.drop(['ORIGIN_AIRPORT','DESTINATION_AIRPORT', 'AIRLINE'], axis=1)
flights_df
final_df=pd.concat([flights_df, lab_enc], axis=1)
print (final_df.head())

final_df= final_df[['MONTH', 'DAY', 'DAY_OF_WEEK', 'TAXI_OUT', 'TAXI_IN', 'AIRLINE', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT',
        'SCHEDULED_DEPARTURE_HOUR', 'DEPARTURE_TIME_HOUR', 'SCHEDULED_ARRIVAL_HOUR', 'ARRIVAL_TIME_HOUR', 'ARRIVAL_DELAY',
        'SCHEDULED_TIME', 'DEPARTURE_DELAY']]
final_df.info()
final_df.to_csv("D:/Data Science Course/Air Flight Delay Prediction Project/SRC/final_dF.csv")

"""**Train Test Split**"""

X=final_df.iloc[:,0:14]
print(X.head())
y= final_df.iloc[:,14]
print(y.head())

#Train-Test-split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state=0)

"""**Model Building**

**>>Linear Regression Model<<**
"""

regressor=LinearRegression()
regressor.fit(X_train,y_train)
y_train_pred=regressor.predict(X_train)
y_test_pred=regressor.predict(X_test)

from sklearn.metrics import r2_score
from sklearn import metrics
print(r2_score(y_train,y_train_pred))
print(r2_score(y_test,y_test_pred))

## MSE and RMSE Value for training data
print('MSE:',metrics.mean_squared_error(y_train_pred,y_train))
print('RMSE:',np.sqrt(metrics.mean_squared_error(y_train_pred,y_train)))

## MSE and RMSE Value for testing data
print('MSE:',metrics.mean_squared_error(y_test_pred,y_test))
print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test_pred,y_test)))

"""**>>Random Forest Model<<**"""

RF_Model = RandomForestRegressor()

model=RF_Model.fit(X_train,y_train)
prediction_train=model.predict(X_train)
prediction_test = model.predict(X_test)
print(prediction_test)

from sklearn import metrics
from sklearn.metrics import r2_score
print('RMSE for Train:', np.sqrt(metrics.mean_squared_error(y_train, prediction_train)))
print('RMSE for Test:', np.sqrt(metrics.mean_squared_error(y_test, prediction_test)))

print ('R-Squared for Test:', r2_score(y_test, prediction_test))
print (model.score(X_train,y_train))
print (model.score(X_test,y_test))

"""**Model Deployment**"""

# Saving model to disk
pickle.dump(model, open('model.pkl','wb'))

